#!/usr/bin/env python3
"""
    Use the users credentials to talk to AWS STS.
    We pass STS a 2 factor code and get back a time limited set of credentials
    Works well with this IAM policy:
    https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_aws_my-sec-creds-self-manage.html
"""
import argparse
import configparser
import os

import boto3

AWS_CREDENTIALS = os.path.expanduser("~") + "/.aws/credentials"

PARSER = argparse.ArgumentParser()
PARSER.add_argument('-p', '--profile', help='non-STS profile (default is default)',
                    default='default', action='store')
PARSER.add_argument(
    '--mfa', help='Virtual MFA device arn, omit for a device list', default=None, action='store')
PARSER.add_argument('--mfa_code', help='Code from MFA device',
                    default=None, action='store')
PARSER.parse_args()
ARGS = PARSER.parse_args()

CONFIG = configparser.ConfigParser()
CONFIG.read(AWS_CREDENTIALS)

AWS_SESSION = boto3.Session(profile_name=ARGS.profile)
AWS_USERID = AWS_SESSION.client('sts').get_caller_identity().get('UserId')
STS_DURATION = 43200


def get_mfa_devices():
    """ Yield our MFA devices """
    iam = AWS_SESSION.client('iam')
    for device in iam.list_virtual_mfa_devices(AssignmentStatus='Assigned')['VirtualMFADevices']:
        if device['User']['UserId'] == AWS_USERID:
            yield device['SerialNumber']


def get_sts_token(mfa, mfa_code):
    """ Return an STS session """
    sts = AWS_SESSION.client('sts')
    return sts.get_session_token(
        DurationSeconds=STS_DURATION,
        SerialNumber=mfa,
        TokenCode=mfa_code
    )


def write_config():
    """ Write our configfile to AWS_CREDENTIALS """
    with open(AWS_CREDENTIALS, 'w') as configfile:
        CONFIG.write(configfile)


if __name__ == '__main__':
    # Write our MFA device to the config if one is provided
    if ARGS.mfa:
        CONFIG[ARGS.profile]['mfa'] = ARGS.mfa
        write_config()
        print("Wrote " + ARGS.mfa + " device to profile " + ARGS.profile)

    # Try to read our MFA device from the config
    # If not found list out any found assigned to our account
    try:
        MFA = CONFIG[ARGS.profile]['mfa']
    except KeyError:
        print("No saved MFA device found")
        MFA_DEVICES = list(get_mfa_devices())
        if not MFA_DEVICES:
            print(
                "No virtual MFA devices assigned. Add a device under 'My Security Credentials")
            print("Then provide it to aws2fa with the --mfa option")
        else:
            print(
                "Assigned virtual MFA devices. Pass one of these to aws2fa with the --mfa option")
            print(MFA_DEVICES)
        exit(1)

    # If we haven't been passed an MFA code tell the user
    if not ARGS.mfa_code:
        print("MFA device is assigned but no code provided.")
        print("Pass the code from your MFA device with --mfa_code")
        exit(1)

    # Populate a _sts version of the users profile and write it to the config
    TOKEN = get_sts_token(mfa=MFA, mfa_code=ARGS.mfa_code)
    CONFIG.remove_section(ARGS.profile + "_sts")
    CONFIG.add_section(ARGS.profile + "_sts")
    CONFIG[ARGS.profile +
           "_sts"]['aws_access_key_id'] = TOKEN['Credentials']['AccessKeyId']
    CONFIG[ARGS.profile +
           "_sts"]['aws_secret_access_key'] = TOKEN['Credentials']['SecretAccessKey']
    CONFIG[ARGS.profile +
           "_sts"]['aws_session_token'] = TOKEN['Credentials']['SessionToken']
    write_config()

    # We're done, tell the user what to do next
    print("Session token written successfully to profile",
          ARGS.profile + "_sts", "for", STS_DURATION, "seconds")
    print("ex: aws --profile " + ARGS.profile + "_sts s3 ls")
